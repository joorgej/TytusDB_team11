
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftR_UNIONR_INTERSECTR_EXCEPTrightR_NOTleftR_ANDR_ORleftR_BETWEENR_ISleftS_IGUALOL_DISTINTODEOL_MAYORQUEOL_MENORQUEOL_MAYORIGUALQUEOL_MENORIGUALQUEleftOC_CONCATENARleftO_SUMAO_RESTAleftO_PRODUCTOO_DIVISIONO_MODULARrightUO_SUMAUO_RESTAleftO_EXPONENTECHARACTER COMMENT DECIMAL ID INTEGER OC_AND OC_CONCATENAR OC_NOT OC_OR OC_SHIFTL OC_SHIFTR OC_XOR OL_DISTINTODE OL_ESIGUAL OL_MAYORIGUALQUE OL_MAYORQUE OL_MENORIGUALQUE OL_MENORQUE O_DIVISION O_EXPONENTE O_MODULAR O_PRODUCTO O_RESTA O_SUMA R_ADD R_ALL R_ALTER R_AND R_ANY R_AS R_ASC R_BETWEEN R_BRIN R_BTREE R_BY R_CASE R_CHECK R_COLUMN R_CONSTRAINT R_COUNT R_CREATE R_CURRENT_DATE R_CURRENT_TIME R_CURRENT_USER R_DATABASE R_DATABASES R_DATE_PART R_DAY R_DEFAULT R_DELETE R_DESC R_DISTINCT R_DROP R_ELSE R_END R_ENUM R_EXCEPT R_EXISTS R_EXTRACT R_FALSE R_FIRST R_FOREIGN R_FROM R_FULL R_GIN R_GIST R_GROUP R_HASH R_HAVING R_HOUR R_IF R_IN R_INDEX R_INHERITS R_INNER R_INSERT R_INTERSECT R_INTERVAL R_INTO R_IS R_ISNULL R_JOIN R_KEY R_LAST R_LEFT R_LIKE R_LIMIT R_MINUTE R_MODE R_MONTH R_NATURAL R_NOT R_NOTNULL R_NOW R_NULL R_NULLS R_OFFSET R_ON R_OR R_ORDER R_OUTER R_OWNER R_PRIMARY R_PROM R_REFERENCES R_RENAME R_REPLACE R_RIGHT R_SECOND R_SELECT R_SESSION_USER R_SET R_SHOW R_SOME R_SPGIST R_SUM R_SYMMETRIC R_TABLE R_THEN R_TIMESTAMP R_TO R_TRUE R_TRUNCATE R_TYPE R_UNION R_UNIQUE R_UNKNOWN R_UPDATE R_USE R_USING R_VALUES R_WHEN R_WHERE R_YEAR STRING S_COMA S_IGUAL S_PARDER S_PARIZQ S_PUNTO S_PUNTOCOMA T_BIGINT T_BOOLEAN T_CHAR T_CHARACTER T_DATE T_DECIMAL T_DOUBLE T_INTEGER T_MONEY T_NUMERIC T_PRECISION T_REAL T_SMALLINT T_TEXT T_TIME T_VARCHAR T_VARYINGinit : stmtListstmtList : stmtList stmtstmtList : stmt\n    stmt : createStmt  S_PUNTOCOMA\n        | showStmt S_PUNTOCOMA\n        | alterStmt S_PUNTOCOMA\n        | dropStmt S_PUNTOCOMA\n        | insertStmt S_PUNTOCOMA\n        | updateStmt S_PUNTOCOMA\n        | deleteStmt S_PUNTOCOMA\n        | truncateStmt S_PUNTOCOMA\n        | useStmt S_PUNTOCOMA\n        | selectStmt S_PUNTOCOMA\n    \n    idOrString : ID\n    | STRING\n    | CHARACTER\n    createStmt : R_CREATE createBody\n    createBody : createOpts\n    createOpts : R_TABLE ifNotExists idOrString S_PARIZQ createTableList S_PARDER inheritsOpt \n    createOpts : orReplace R_DATABASE ifNotExists idOrString createOwner createMode\n    \n    createOpts : indexUnique R_INDEX indexName R_ON ID usingMethod S_PARIZQ indexList S_PARDER whereCl\n    \n    indexName : ID\n    \n    indexName :\n    \n    indexList : indexList S_COMA columnIndex\n    \n    indexList : columnIndex\n    \n    columnIndex : columnOpt indexOrder indexNull\n    \n    columnOpt : ID\n    \n    columnOpt : ID S_PARIZQ ID S_PARDER\n    \n    columnOpt : S_PARIZQ columnOpt S_PARDER\n    \n    usingMethod : R_USING R_HASH\n    | R_USING R_BTREE\n    | R_USING R_GIST\n    | R_USING R_SPGIST\n    | R_USING R_GIN\n    | R_USING R_BRIN\n    \n    usingMethod :\n    \n    indexOrder : R_DESC\n    | R_ASC\n    |\n    \n    indexNull : R_NULLS firstLast\n    |\n    \n    firstLast : R_FIRST\n    | R_LAST\n    |\n    \n    indexUnique : R_UNIQUE\n    |\n    \n    orReplace : R_OR R_REPLACE\n    \n    orReplace :\n    \n    createOpts : R_TYPE ifNotExists ID R_AS R_ENUM S_PARIZQ paramsList S_PARDER\n    \n    ifNotExists : R_IF R_NOT R_EXISTS\n    \n    ifNotExists :\n    \n    inheritsOpt : R_INHERITS S_PARIZQ ID S_PARDER\n    \n    inheritsOpt :\n    \n    createOwner : R_OWNER ID\n    | R_OWNER STRING\n    \n    createOwner :  R_OWNER S_IGUAL ID\n    | R_OWNER S_IGUAL STRING\n    \n    createOwner :\n    \n    createMode : R_MODE INTEGER\n    \n    createMode : R_MODE S_IGUAL INTEGER\n    \n    createMode :\n    createTableList : createTableList S_COMA createTablecreateTableList :  createTable\n    createTable :  ID types createColumns\n    \n    createTable : createConstraint\n    | createUnique\n    | createPrimary\n    | createForeign\n    \n    createColumns : colOptionsList\n    \n    createColumns :\n    createConstraint : constrName R_CHECK S_PARIZQ booleanCheck S_PARDERcreateUnique : R_UNIQUE S_PARIZQ idList S_PARDERcreatePrimary : R_PRIMARY R_KEY S_PARIZQ idList S_PARDER\n    createForeign : constrName R_FOREIGN R_KEY S_PARIZQ idList S_PARDER R_REFERENCES ID S_PARIZQ idList S_PARDER\n    \n    constrName : R_CONSTRAINT ID\n    \n    constrName :\n    idList : idList S_COMA IDidList : ID\n    types :  ID\n    \n    types : T_SMALLINT\n    | T_INTEGER\n    | T_BIGINT\n    | T_REAL\n    | T_DOUBLE T_PRECISION\n    | T_MONEY\n    | T_TEXT\n    | T_BOOLEAN\n    | R_TIMESTAMP\n    | T_DATE\n    | T_TIME\n    \n    types : T_DECIMAL optParams\n    | T_NUMERIC optParams\n    | T_VARCHAR optParams\n    | T_CHARACTER optParams\n    | T_CHAR optParams\n    \n    types : T_CHARACTER T_VARYING optParams\n    \n    types : R_INTERVAL intervalFields\n    \n    intervalFields :  R_YEAR\n    | R_MONTH\n    | R_DAY\n    | R_HOUR\n    | R_MINUTE\n    | R_SECOND\n    \n    intervalFields :\n    optParams : S_PARIZQ literalList S_PARDERoptParams : colOptionsList : colOptionsList colOptionscolOptionsList : colOptions\n    colOptions : defaultVal\n    | nullOpt\n    | constraintOpt\n    | primaryOpt\n    | referencesOpt\n    defaultVal : R_DEFAULT literal\n    nullOpt : R_NOT R_NULL\n    \n    nullOpt : R_NULL\n    \n    constraintOpt : constrName R_UNIQUE\n    \n    constraintOpt : constrName R_CHECK S_PARIZQ booleanCheck S_PARDER\n    primaryOpt : R_PRIMARY R_KEYreferencesOpt : R_REFERENCES ID\n    expresion : datatype\n            | expBool\n    \n    expresion : S_PARIZQ selectStmt S_PARDER\n    \n    funcCall : ID S_PARIZQ paramsList S_PARDER\n    \n    funcCall : ID S_PARIZQ S_PARDER\n            | R_NOW S_PARIZQ S_PARDER\n    \n    funcCall : R_COUNT S_PARIZQ datatype S_PARDER\n            | R_COUNT S_PARIZQ O_PRODUCTO S_PARDER\n            | R_SUM S_PARIZQ datatype S_PARDER\n            | R_PROM S_PARIZQ datatype S_PARDER\n    \n    extract : R_EXTRACT S_PARIZQ optsExtract R_FROM timeStamp S_PARDER\n    \n    extract : R_EXTRACT S_PARIZQ optsExtract R_FROM columnName S_PARDER\n    \n    timeStamp : R_TIMESTAMP STRING\n          | R_INTERVAL STRING\n    \n    optsExtract : R_YEAR\n                  | R_MONTH\n                  | R_DAY\n                  | R_HOUR\n                  | R_MINUTE\n                  | R_SECOND\n    \n    datePart : R_DATE_PART S_PARIZQ STRING S_COMA dateSource S_PARDER\n    \n    dateSource : R_TIMESTAMP STRING\n          | T_DATE STRING\n          | T_TIME STRING\n          | R_INTERVAL STRING\n          | R_NOW S_PARIZQ S_PARDER\n    \n    current : R_CURRENT_DATE\n          | R_CURRENT_TIME\n    \n    current : timeStamp\n    literalList : literalList S_COMA literalliteralList : literal\n    literal :  INTEGER\n    | STRING\n    | DECIMAL\n    | CHARACTER\n    | R_TRUE\n    | R_FALSE\n    | R_NULL\n    paramsList : paramsList S_COMA datatypeparamsList : datatype\n    datatype : datatype O_SUMA datatype\n    | datatype O_RESTA datatype\n    | datatype O_PRODUCTO datatype\n    | datatype O_DIVISION datatype\n    | datatype O_EXPONENTE datatype\n    | datatype O_MODULAR datatype\n    \n    datatype : datatype OC_CONCATENAR datatype\n    \n    datatype : R_CASE caseList optElse R_END\n    \n    caseList : caseList caseWhen\n            | caseWhen\n    caseWhen : R_WHEN expBool R_THEN literaloptElse : R_ELSE literal\n    |\n    \n    datatype : O_RESTA datatype %prec UO_RESTA\n    | O_SUMA datatype %prec UO_SUMA\n    \n    datatype : columnName\n    | literal\n    | funcCall\n    | extract\n    | datePart\n    | current\n    \n    datatype : S_PARIZQ datatype S_PARDER\n    \n    expComp : datatype OL_MENORQUE datatype\n    | datatype OL_MAYORQUE datatype\n    | datatype OL_MAYORIGUALQUE datatype\n    | datatype OL_MENORIGUALQUE datatype\n    | datatype S_IGUAL datatype\n    | datatype OL_DISTINTODE datatype\n    \n    expComp : datatype R_IS R_DISTINCT R_FROM datatype\n    \n    expComp : datatype R_IS R_NOT R_DISTINCT R_FROM datatype\n    \n    expComp :  datatype R_BETWEEN datatype R_AND datatype\n    \n    expComp : datatype R_NOT R_BETWEEN datatype R_AND datatype\n    | datatype R_BETWEEN R_SYMMETRIC datatype R_AND datatype\n    \n    expComp : datatype R_ISNULL\n    | datatype R_NOTNULL\n    \n    expComp : datatype R_IS R_NULL\n    | datatype R_IS R_TRUE\n    | datatype R_IS R_FALSE\n    | datatype R_IS R_UNKNOWN\n    \n    expComp : datatype R_IS R_NOT R_NULL\n    | datatype R_IS R_NOT R_TRUE\n    | datatype R_IS R_NOT R_FALSE\n    | datatype R_IS R_NOT R_UNKNOWN\n    \n    boolean : R_EXISTS S_PARIZQ selectStmt S_PARDER\n    \n    boolean : datatype R_IN S_PARIZQ selectStmt S_PARDER\n    \n    boolean : datatype R_NOT R_IN S_PARIZQ selectStmt S_PARDER\n    \n    boolean : expComp\n    \n    expBool : expBool R_AND expBool\n            | expBool R_OR expBool\n    \n    expBool : R_NOT expBool\n    \n    expBool : S_PARIZQ expBool S_PARDER\n    \n    expBool : expBool optBoolPredicate\n    \n    expBool : boolean\n    \n    optBoolPredicate : R_IS R_TRUE\n    | R_IS R_FALSE\n    | R_IS R_UNKNOWN\n    \n    optBoolPredicate : R_IS R_NOT R_TRUE\n    | R_IS R_NOT R_FALSE\n    | R_IS R_NOT R_UNKNOWN\n    \n    columnName : ID\n    \n    columnName : ID S_PUNTO ID\n    \n    booleanCheck : idOrLiteral OL_MENORQUE idOrLiteral\n    | idOrLiteral OL_MAYORQUE idOrLiteral\n    | idOrLiteral OL_MAYORIGUALQUE idOrLiteral\n    | idOrLiteral OL_MENORIGUALQUE idOrLiteral\n    | idOrLiteral S_IGUAL idOrLiteral\n    | idOrLiteral OL_DISTINTODE idOrLiteral\n    \n    booleanCheck : idOrLiteral R_IS R_DISTINCT R_FROM idOrLiteral\n    \n    booleanCheck : idOrLiteral R_IS R_NOT R_DISTINCT R_FROM idOrLiteral\n    \n    idOrLiteral : ID\n    | INTEGER\n    | STRING\n    | DECIMAL\n    | CHARACTER\n    | R_TRUE\n    | R_FALSE\n    alterStmt : R_ALTER R_DATABASE idOrString alterDb\n    | R_ALTER R_TABLE idOrString alterTableList\n    | R_ALTER R_INDEX ifExists idOrString R_RENAME R_TO idOrString\n    | R_ALTER R_INDEX ifExists idOrString R_ALTER column idOrString idOrNumber\n    column : R_COLUMN\n    |\n    idOrNumber : ID\n    | INTEGER\n    alterDb : R_RENAME R_TO idOrString\n    | R_OWNER R_TO ownerOPts\n    \n    ownerOPts : idOrString\n    | R_CURRENT_USER\n    | R_SESSION_USER\n    \n    alterTableList : alterTableList S_COMA alterTable\n    \n    alterTableList : alterTable\n    \n    alterTable : R_ADD alterAdd\n    | R_ALTER alterAlter\n    | R_DROP alterDrop\n    | R_RENAME alterRename\n    \n    alterAdd : R_COLUMN ID types\n    \n    alterAdd : createConstraint\n    | createPrimary\n    | createForeign\n    \n    alterAdd : constrName R_UNIQUE S_PARIZQ ID S_PARDER\n    \n    alterAlter : R_COLUMN ID R_SET nullOpt\n    | R_COLUMN ID R_SET defaultVal\n    | R_COLUMN ID R_TYPE types\n    \n    alterDrop : R_CONSTRAINT ID\n    | R_COLUMN ID\n    \n    alterRename : R_COLUMN ID R_TO ID\n    \n    dropStmt : R_DROP R_TABLE ifExists idOrString\n    | R_DROP R_DATABASE ifExists idOrString\n    \n    dropStmt : R_DROP R_INDEX ifExists idList\n    ifExists : R_IF R_EXISTSifExists :selectStmt : R_SELECT R_DISTINCT selectParams fromCl whereCl groupByCl limitCl orderByClselectStmt : R_SELECT selectParams fromCl whereCl groupByCl limitCl orderByClselectStmt : selectStmt R_UNION allOpt selectStmtselectStmt : selectStmt R_INTERSECT allOpt selectStmtselectStmt : selectStmt R_EXCEPT allOpt selectStmtselectStmt : S_PARIZQ selectStmt S_PARDER\n    fromCl : R_FROM tableExp\n    selectStmt : R_SELECT selectParamsallOpt : R_ALL\n    |\n    selectParams : O_PRODUCTOselectParams : selectListselectList : selectList S_COMA selectListParams optAliasselectList : selectListParams optAliasselectListParams : expresionselectListParams : ID S_PUNTO O_PRODUCTO\n    optAlias : R_AS idOrString\n    \n    optAlias : idOrString\n    optAlias : tableExp : tableExp S_COMA fromBody tableExp : fromBody fromBody : ID optAliasfromBody : S_PARIZQ selectStmt S_PARDER R_AS idOrStringwhereCl : R_WHERE expBoolwhereCl : \n    groupByCl : R_GROUP R_BY groupList havingCl\n    \n    groupByCl :\n    \n    groupList :  groupList S_COMA columnName\n            | groupList S_COMA INTEGER\n    \n    groupList :  columnName\n            | INTEGER\n    havingCl : R_HAVING expBoolhavingCl :orderByCl : R_ORDER R_BY orderListorderByCl : orderList : orderList S_COMA orderByElemorderList : orderByElem\n    orderByElem : columnName orderOpts orderNull\n                | INTEGER orderOpts orderNull\n    orderOpts : R_ASC\n    | R_DESC\n    orderOpts :orderNull : R_NULLS R_FIRST\n    | R_NULLS R_LAST\n    orderNull :limitCl : R_LIMIT INTEGER offsetLimit\n    | R_LIMIT R_ALL offsetLimit\n    limitCl :offsetLimit : R_OFFSET INTEGERoffsetLimit :insertStmt : R_INSERT R_INTO ID paramsColumn R_VALUES S_PARIZQ paramsList S_PARDERparamsColumn : S_PARIZQ idList S_PARDERparamsColumn :updateStmt : R_UPDATE fromBody R_SET updateCols whereClupdateCols : updateCols S_COMA updateValsupdateCols : updateVals updateVals : ID S_IGUAL updateExpupdateExp : datatype\n    | R_DEFAULT\n    deleteStmt : R_DELETE fromCl whereCltruncateStmt : R_TRUNCATE tableOpt IDtableOpt : R_TABLE\n    |\n    showStmt : R_SHOW R_DATABASES likeOptlikeOpt : R_LIKE STRING\n    |\n    useStmt : R_USE ID'
    
_lr_action_items = {'R_CREATE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[14,14,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_SHOW':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_ALTER':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,118,119,120,121,210,295,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,204,309,204,]),'R_DROP':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,118,119,120,121,295,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,208,208,]),'R_INSERT':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_UPDATE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_DELETE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[21,21,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_TRUNCATE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_USE':([0,2,3,25,26,27,28,29,30,31,32,33,34,35,],[23,23,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'R_SELECT':([0,2,3,19,25,26,27,28,29,30,31,32,33,34,35,36,37,38,58,73,105,106,107,108,168,188,240,326,],[24,24,-3,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-281,-281,-281,24,24,24,-280,24,24,24,24,24,24,]),'S_PARIZQ':([0,2,3,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,58,60,64,70,73,74,75,83,92,93,94,95,96,98,101,105,106,107,108,118,119,120,127,135,141,144,145,146,147,148,149,150,151,152,154,155,156,157,158,159,161,164,165,168,172,174,178,180,183,184,185,188,194,224,240,241,242,256,312,316,324,326,328,334,357,360,361,370,371,373,382,396,398,400,410,426,427,428,429,430,438,440,446,473,495,509,510,511,512,513,514,515,544,551,559,560,591,632,],[19,19,-3,19,58,73,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-281,-281,-281,19,58,73,144,168,174,174,180,182,183,184,185,186,187,188,19,-280,19,19,-14,-15,-16,217,180,73,174,174,174,174,174,174,174,174,240,174,174,174,174,174,174,174,180,180,168,144,174,180,180,174,174,174,19,286,58,19,326,174,174,382,174,174,19,174,174,432,-36,440,444,445,447,174,174,174,174,471,491,491,491,491,491,509,174,530,546,491,560,-30,-31,-32,-33,-34,-35,180,585,588,560,560,636,]),'$end':([1,2,3,25,26,27,28,29,30,31,32,33,34,35,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'S_PUNTOCOMA':([4,5,6,7,8,9,10,11,12,13,39,40,47,57,59,63,65,66,67,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,115,118,119,120,128,130,132,134,136,137,138,140,142,162,163,166,172,173,175,179,189,190,191,192,193,200,201,205,206,212,213,214,215,218,219,221,223,225,226,227,228,229,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,263,264,265,272,288,293,296,298,299,300,304,307,314,318,319,320,322,323,330,331,332,333,336,337,338,339,342,343,344,345,348,358,362,363,364,365,366,368,375,376,381,384,385,386,387,388,389,390,394,397,399,404,411,413,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,433,435,436,443,450,452,453,455,456,457,458,459,460,461,462,463,464,465,466,472,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,505,507,508,517,518,519,532,533,534,535,536,537,539,541,542,548,549,556,558,564,565,566,575,576,577,578,579,580,581,582,583,586,590,605,606,607,608,609,614,621,622,624,633,634,638,],[26,27,28,29,30,31,32,33,34,35,-17,-18,-337,-290,-296,-338,-279,-282,-283,-290,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-335,-14,-15,-16,-277,-293,-289,-331,-278,-292,-332,-296,-285,-194,-195,-212,-220,-175,-174,-210,-133,-134,-274,-275,-276,-336,-237,-238,-251,-267,-268,-269,-78,-296,-327,-288,-295,-296,-298,-290,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,-126,-58,-253,-252,-257,-258,-259,-254,-255,-325,-291,-298,-319,-284,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-61,-245,-246,-247,-248,-249,-250,-264,-265,-77,-326,-328,-329,-330,-294,-319,-306,-205,-189,-191,-220,-53,-79,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,-20,-54,-55,-256,-239,-306,-273,-321,-321,-304,-301,-302,-206,-192,-190,-193,-131,-132,-141,-19,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,-59,-56,-57,-261,-262,-263,-266,-240,-243,-244,-322,-272,-317,-318,-297,-114,-115,-96,-60,-49,-260,-71,-73,-305,-308,-313,-313,-320,-299,-300,-303,-105,-296,-316,-311,-312,-316,-52,-21,-307,-309,-310,-314,-315,-74,]),'R_UNION':([13,55,57,65,66,67,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,128,130,132,133,136,137,140,142,162,163,166,169,172,173,175,179,189,190,191,192,193,221,223,225,226,227,228,229,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,263,264,265,272,285,318,319,320,322,323,325,330,331,332,333,336,337,338,339,342,343,344,345,348,388,389,390,394,395,397,399,404,452,453,455,456,457,458,459,460,461,462,463,464,465,466,537,539,541,542,576,577,578,579,580,581,582,583,605,606,607,608,621,622,624,633,634,],[36,36,-290,-279,-282,-283,-290,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-277,-293,-289,36,-278,-292,-296,-285,-194,-195,-212,36,-220,-175,-174,-210,-133,-134,-274,-275,-276,-288,-295,-296,-298,-290,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,-126,36,-291,-298,-319,-284,-124,36,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-294,-319,-306,-205,36,-189,-191,-220,-306,-273,-321,-321,-304,-301,-302,-206,-192,-190,-193,-131,-132,-141,-272,-317,-318,-297,-305,-308,-313,-313,-320,-299,-300,-303,-316,-311,-312,-316,-307,-309,-310,-314,-315,]),'R_INTERSECT':([13,55,57,65,66,67,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,128,130,132,133,136,137,140,142,162,163,166,169,172,173,175,179,189,190,191,192,193,221,223,225,226,227,228,229,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,263,264,265,272,285,318,319,320,322,323,325,330,331,332,333,336,337,338,339,342,343,344,345,348,388,389,390,394,395,397,399,404,452,453,455,456,457,458,459,460,461,462,463,464,465,466,537,539,541,542,576,577,578,579,580,581,582,583,605,606,607,608,621,622,624,633,634,],[37,37,-290,-279,-282,-283,-290,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-277,-293,-289,37,-278,-292,-296,-285,-194,-195,-212,37,-220,-175,-174,-210,-133,-134,-274,-275,-276,-288,-295,-296,-298,-290,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,-126,37,-291,-298,-319,-284,-124,37,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-294,-319,-306,-205,37,-189,-191,-220,-306,-273,-321,-321,-304,-301,-302,-206,-192,-190,-193,-131,-132,-141,-272,-317,-318,-297,-305,-308,-313,-313,-320,-299,-300,-303,-316,-311,-312,-316,-307,-309,-310,-314,-315,]),'R_EXCEPT':([13,55,57,65,66,67,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,128,130,132,133,136,137,140,142,162,163,166,169,172,173,175,179,189,190,191,192,193,221,223,225,226,227,228,229,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,263,264,265,272,285,318,319,320,322,323,325,330,331,332,333,336,337,338,339,342,343,344,345,348,388,389,390,394,395,397,399,404,452,453,455,456,457,458,459,460,461,462,463,464,465,466,537,539,541,542,576,577,578,579,580,581,582,583,605,606,607,608,621,622,624,633,634,],[38,38,-290,-279,-282,-283,-290,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-277,-293,-289,38,-278,-292,-296,-285,-194,-195,-212,38,-220,-175,-174,-210,-133,-134,-274,-275,-276,-288,-295,-296,-298,-290,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,-126,38,-291,-298,-319,-284,-124,38,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-294,-319,-306,-205,38,-189,-191,-220,-306,-273,-321,-321,-304,-301,-302,-206,-192,-190,-193,-131,-132,-141,-272,-317,-318,-297,-305,-308,-313,-313,-320,-299,-300,-303,-316,-311,-312,-316,-307,-309,-310,-314,-315,]),'R_TABLE':([14,16,17,22,],[41,49,51,62,]),'R_TYPE':([14,367,],[44,442,]),'R_OR':([14,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,162,163,166,171,172,173,175,179,189,190,223,228,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,264,265,271,272,323,330,331,332,333,336,337,338,339,342,343,344,345,348,394,397,399,460,461,462,463,464,465,466,583,],[45,165,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-194,-195,-212,165,-220,-175,-174,165,-133,-134,165,-221,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-182,-211,165,-126,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-205,-189,-191,-206,-192,-190,-193,-131,-132,-141,165,]),'R_DATABASE':([14,16,17,42,114,],[-48,48,52,111,-47,]),'R_UNIQUE':([14,85,86,87,88,89,90,91,207,286,301,374,412,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,476,477,478,479,480,481,482,485,486,489,490,492,493,494,495,496,497,498,499,500,501,502,503,547,548,549,550,552,553,556,586,625,],[46,-152,-153,-154,-155,-156,-157,-158,-76,357,370,-75,357,-79,-76,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,-76,-108,-109,-110,-111,-112,-113,-116,550,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,-107,-114,-115,-117,-119,-120,-96,-105,-118,]),'R_INDEX':([14,16,17,43,46,],[-46,50,53,112,-45,]),'R_DATABASES':([15,],[47,]),'R_INTO':([18,],[54,]),'ID':([20,22,23,24,41,44,48,49,50,51,52,53,54,57,60,61,62,64,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,99,100,102,109,111,112,113,118,119,120,122,124,125,126,129,131,135,141,143,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,162,163,164,165,166,168,172,173,174,175,178,179,180,183,184,185,189,190,196,211,217,224,227,228,229,231,233,234,235,236,237,238,239,242,243,244,245,246,247,248,251,252,253,254,256,257,258,259,260,261,263,264,265,266,272,286,287,289,291,292,294,297,303,305,306,308,309,311,315,316,317,323,324,328,330,331,332,333,334,336,337,338,339,342,343,344,345,346,348,351,359,369,378,379,380,382,392,394,396,397,398,399,400,412,432,437,440,442,444,445,447,448,449,460,461,462,463,464,465,466,488,509,530,538,543,544,546,560,567,568,569,570,571,572,585,588,591,604,618,620,631,636,],[57,-334,63,70,-51,-51,118,118,-271,-271,-271,-271,127,118,57,138,-333,70,118,-286,-220,-121,-122,172,172,172,-176,-177,-178,-179,-180,-181,172,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,118,-51,198,199,-14,-15,-16,118,118,118,215,220,118,172,70,228,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,-194,-195,172,172,-212,172,-220,-175,172,-174,172,-210,172,172,172,172,-133,-134,118,-270,215,57,118,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,172,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,172,-208,-209,-214,-215,-216,-123,-182,-211,228,-126,351,-50,360,118,118,367,369,374,375,376,377,-242,381,220,172,118,-124,172,172,-200,-201,-202,-203,172,-217,-218,-219,-168,-127,-128,-129,-130,404,-204,413,435,413,118,-241,118,172,404,-205,172,-189,172,-191,172,351,215,507,172,413,520,523,215,532,534,-206,-192,-190,-193,-131,-132,-141,553,559,215,404,404,172,584,559,523,523,523,523,523,523,523,612,559,404,523,632,523,215,]),'R_FROM':([21,65,66,67,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,132,139,142,162,163,166,172,173,175,179,189,190,221,227,228,229,231,233,234,235,236,237,238,239,243,244,245,246,247,248,249,251,252,253,254,257,258,259,260,261,263,264,265,272,277,278,279,280,281,282,283,322,323,329,330,331,332,333,336,337,338,339,342,343,344,345,348,394,397,399,460,461,462,463,464,465,466,601,619,],[60,60,-282,-283,-290,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-289,60,-285,-194,-195,-212,-220,-175,-174,-210,-133,-134,-288,-290,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,328,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,-126,346,-135,-136,-137,-138,-139,-140,-284,-124,398,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-205,-189,-191,-206,-192,-190,-193,-131,-132,-141,618,631,]),'R_DISTINCT':([24,160,250,573,602,],[64,249,329,601,619,]),'O_PRODUCTO':([24,64,70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,143,170,172,173,175,181,183,189,190,228,231,232,233,234,235,236,237,238,239,243,244,245,246,247,248,255,264,267,272,273,275,276,323,327,335,339,342,343,344,345,386,393,397,399,461,462,463,464,465,466,],[66,66,-220,147,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,229,147,-220,-175,-174,147,274,-133,-134,-221,-125,147,147,147,-163,-164,-165,-166,147,147,147,147,147,147,147,147,-182,147,-126,147,147,147,-124,147,147,-168,-127,-128,-129,-130,147,147,147,147,147,147,147,-131,-132,-141,]),'R_CASE':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'O_RESTA':([24,64,70,71,73,74,75,77,78,79,80,81,82,83,85,86,87,88,89,90,91,97,99,100,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,170,172,173,174,175,178,180,181,183,184,185,189,190,228,231,232,233,234,235,236,237,238,239,242,243,244,245,246,247,248,255,256,264,267,272,273,275,276,316,323,324,327,328,334,335,339,342,343,344,345,382,386,393,396,397,398,399,400,440,461,462,463,464,465,466,544,],[75,75,-220,146,75,75,75,-176,-177,-178,-179,-180,-181,75,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,146,-220,-175,75,-174,75,75,146,75,75,75,-133,-134,-221,-125,146,-161,-162,-163,-164,-165,-166,146,75,146,146,146,146,146,146,146,75,-182,146,-126,146,146,146,75,-124,75,146,75,75,146,-168,-127,-128,-129,-130,75,146,146,75,146,75,146,75,75,146,146,146,-131,-132,-141,75,]),'O_SUMA':([24,64,70,71,73,74,75,77,78,79,80,81,82,83,85,86,87,88,89,90,91,97,99,100,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,170,172,173,174,175,178,180,181,183,184,185,189,190,228,231,232,233,234,235,236,237,238,239,242,243,244,245,246,247,248,255,256,264,267,272,273,275,276,316,323,324,327,328,334,335,339,342,343,344,345,382,386,393,396,397,398,399,400,440,461,462,463,464,465,466,544,],[74,74,-220,145,74,74,74,-176,-177,-178,-179,-180,-181,74,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,145,-220,-175,74,-174,74,74,145,74,74,74,-133,-134,-221,-125,145,-161,-162,-163,-164,-165,-166,145,74,145,145,145,145,145,145,145,74,-182,145,-126,145,145,145,74,-124,74,145,74,74,145,-168,-127,-128,-129,-130,74,145,145,74,145,74,145,74,74,145,145,145,-131,-132,-141,74,]),'R_NOT':([24,64,70,71,73,77,78,79,80,81,82,83,85,86,87,88,89,90,91,97,99,100,110,135,141,160,164,165,167,168,170,172,173,175,178,180,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,441,464,465,466,476,477,478,479,480,481,482,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,544,547,548,549,550,552,553,556,573,586,625,],[83,83,-220,153,83,-176,-177,-178,-179,-180,-181,83,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,195,83,83,250,83,83,262,83,153,-220,-175,-174,83,83,153,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-79,484,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,484,-131,-132,-141,484,-108,-109,-110,-111,-112,-113,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,83,-107,-114,-115,-117,-119,-120,-96,602,-105,-118,]),'INTEGER':([24,64,73,74,75,83,118,119,120,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,270,316,324,328,334,341,382,391,392,396,398,400,434,440,445,449,483,491,506,538,540,543,544,567,568,569,570,571,572,585,587,604,618,631,],[85,85,85,85,85,85,-14,-15,-16,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,455,459,85,85,85,505,85,524,535,85,85,558,579,580,582,85,524,524,524,524,524,524,524,85,579,524,524,]),'STRING':([24,41,48,49,50,51,52,57,64,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,99,100,102,103,104,109,111,116,122,124,125,131,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,162,163,164,165,166,168,172,173,174,175,178,179,180,183,184,185,187,189,190,196,211,227,228,229,231,233,234,235,236,237,238,239,242,243,244,245,246,247,248,251,252,253,254,256,257,258,259,260,261,263,264,265,270,272,287,291,292,309,316,317,323,324,328,330,331,332,333,334,336,337,338,339,341,342,343,344,345,348,359,378,379,380,382,394,396,397,398,399,400,406,407,408,409,437,440,445,460,461,462,463,464,465,466,483,491,544,567,568,569,570,571,572,585,587,618,631,],[86,-51,119,119,-271,-271,-271,119,86,119,-286,-220,-121,-122,86,86,86,-176,-177,-178,-179,-180,-181,86,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,189,190,119,-51,200,119,119,119,119,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-194,-195,86,86,-212,86,-220,-175,86,-174,86,-210,86,86,86,86,284,-133,-134,119,-270,119,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,86,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,86,-208,-209,-214,-215,-216,-123,-182,-211,86,-126,-50,119,119,-242,86,119,-124,86,86,-200,-201,-202,-203,86,-217,-218,-219,-168,86,-127,-128,-129,-130,-204,436,119,-241,119,86,-205,86,-189,86,-191,86,467,468,469,470,508,86,525,-206,-192,-190,-193,-131,-132,-141,86,86,86,525,525,525,525,525,525,525,86,525,525,]),'DECIMAL':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,270,316,324,328,334,341,382,396,398,400,440,445,483,491,544,567,568,569,570,571,572,585,587,618,631,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,526,87,87,87,526,526,526,526,526,526,526,87,526,526,]),'CHARACTER':([24,41,48,49,50,51,52,57,64,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97,99,100,102,109,111,122,124,125,131,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,162,163,164,165,166,168,172,173,174,175,178,179,180,183,184,185,189,190,196,211,227,228,229,231,233,234,235,236,237,238,239,242,243,244,245,246,247,248,251,252,253,254,256,257,258,259,260,261,263,264,265,270,272,287,291,292,309,316,317,323,324,328,330,331,332,333,334,336,337,338,339,341,342,343,344,345,348,378,379,380,382,394,396,397,398,399,400,440,445,460,461,462,463,464,465,466,483,491,544,567,568,569,570,571,572,585,587,618,631,],[88,-51,120,120,-271,-271,-271,120,88,120,-286,-220,-121,-122,88,88,88,-176,-177,-178,-179,-180,-181,88,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,120,-51,120,120,120,120,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-194,-195,88,88,-212,88,-220,-175,88,-174,88,-210,88,88,88,88,-133,-134,120,-270,120,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,88,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,88,-208,-209,-214,-215,-216,-123,-182,-211,88,-126,-50,120,120,-242,88,120,-124,88,88,-200,-201,-202,-203,88,-217,-218,-219,-168,88,-127,-128,-129,-130,-204,120,-241,120,88,-205,88,-189,88,-191,88,88,527,-206,-192,-190,-193,-131,-132,-141,88,88,88,527,527,527,527,527,527,527,88,527,527,]),'R_TRUE':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,160,161,164,165,167,168,174,178,180,183,184,185,242,250,256,262,270,316,324,328,334,341,382,396,398,400,440,445,483,491,544,567,568,569,570,571,572,585,587,618,631,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,252,89,89,89,259,89,89,89,89,89,89,89,89,331,89,336,89,89,89,89,89,89,89,89,89,89,89,528,89,89,89,528,528,528,528,528,528,528,89,528,528,]),'R_FALSE':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,160,161,164,165,167,168,174,178,180,183,184,185,242,250,256,262,270,316,324,328,334,341,382,396,398,400,440,445,483,491,544,567,568,569,570,571,572,585,587,618,631,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,253,90,90,90,260,90,90,90,90,90,90,90,90,332,90,337,90,90,90,90,90,90,90,90,90,90,90,529,90,90,90,529,529,529,529,529,529,529,90,529,529,]),'R_NULL':([24,64,73,74,75,83,85,86,87,88,89,90,91,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,160,161,164,165,168,174,178,180,183,184,185,242,250,256,270,316,324,328,334,341,382,396,398,400,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,440,441,476,477,478,479,480,481,482,483,484,485,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,544,547,548,549,550,552,553,556,586,587,625,],[91,91,91,91,91,91,-152,-153,-154,-155,-156,-157,-158,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,251,91,91,91,91,91,91,91,91,91,91,91,330,91,91,91,91,91,91,91,91,91,91,91,-79,485,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,91,485,485,-108,-109,-110,-111,-112,-113,91,549,-116,-84,-91,91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,91,-107,-114,-115,-117,-119,-120,-96,-105,91,-118,]),'R_NOW':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,347,382,396,398,400,440,544,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,410,92,92,92,92,92,92,]),'R_COUNT':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'R_SUM':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'R_PROM':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'R_EXTRACT':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'R_DATE_PART':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'R_CURRENT_DATE':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'R_CURRENT_TIME':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'R_EXISTS':([24,64,73,83,123,135,141,164,165,168,178,180,195,544,],[101,101,101,101,211,101,101,101,101,101,101,101,287,101,]),'R_TIMESTAMP':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,346,347,351,369,382,396,398,400,440,442,544,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,406,423,423,103,103,103,103,103,423,103,]),'R_INTERVAL':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,346,347,351,369,382,396,398,400,440,442,544,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,409,431,431,104,104,104,104,104,431,104,]),'R_ALL':([36,37,38,391,],[106,106,106,456,]),'R_IF':([41,44,50,51,52,53,111,],[110,110,123,123,123,123,110,]),'R_REPLACE':([45,],[114,]),'R_LIKE':([47,],[116,]),'S_PARDER':([55,57,65,66,67,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,128,130,132,133,136,137,140,142,144,162,163,166,169,170,171,172,173,175,179,182,189,190,191,192,193,215,221,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,263,264,265,267,272,273,274,275,276,285,313,318,319,320,322,323,325,330,331,332,333,336,337,338,339,342,343,344,345,348,349,350,352,353,354,355,381,388,389,390,393,394,395,397,399,402,403,404,405,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,451,452,453,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,474,475,476,477,478,479,480,481,482,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,504,516,520,521,523,524,525,526,527,528,529,531,537,539,541,542,545,547,548,549,550,552,553,554,555,556,557,559,561,562,563,566,574,575,576,577,578,579,580,581,582,583,584,586,589,592,593,594,595,596,597,598,599,600,605,606,607,608,610,611,612,613,615,616,617,621,622,624,625,626,627,628,629,630,633,634,635,637,638,],[128,-290,-279,-282,-283,-290,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-277,-293,-289,222,-278,-292,-296,-285,231,-194,-195,-212,263,264,265,-220,-175,-174,-210,272,-133,-134,-274,-275,-276,-78,-288,-295,-296,-298,-290,-221,-287,323,-125,-160,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,264,-126,342,343,344,345,348,383,-291,-298,-319,-284,-124,394,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,411,-63,-65,-66,-67,-68,-77,-294,-319,-306,-159,-205,460,-189,-191,464,465,-220,466,-79,-70,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,536,-306,-273,-321,-321,-304,-301,-302,-206,-192,-190,-193,-131,-132,-141,-142,-143,-144,-145,545,-62,-64,-69,-108,-109,-110,-111,-112,-113,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,557,564,565,566,-230,-231,-232,-233,-234,-235,-236,575,-272,-317,-318,-297,-146,-107,-114,-115,-117,-119,-120,586,-151,-96,-72,-27,590,-25,-39,-71,603,-73,-305,-308,-313,-313,-320,-299,-300,-303,609,-105,613,-41,-37,-38,-222,-223,-224,-225,-226,-227,-316,-311,-312,-316,625,-150,626,-29,-24,-26,-44,-307,-309,-310,-118,-28,-40,-42,-43,-228,-314,-315,-229,638,-74,]),'R_SET':([56,57,118,119,120,130,132,221,367,388,],[129,-290,-14,-15,-16,-293,-289,-288,441,-294,]),'R_AS':([57,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,162,163,166,172,173,175,179,189,190,199,222,227,228,229,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,263,264,265,272,323,330,331,332,333,336,337,338,339,342,343,344,345,348,394,397,399,460,461,462,463,464,465,466,],[131,131,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-194,-195,-212,-220,-175,-174,-210,-133,-134,290,317,131,-221,-287,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,-126,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-205,-189,-191,-206,-192,-190,-193,-131,-132,-141,]),'S_COMA':([57,67,68,69,70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,130,132,136,137,142,162,163,166,172,173,175,179,189,190,205,206,214,215,218,219,221,227,228,229,230,231,232,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,263,264,265,272,284,293,296,298,299,300,304,307,313,318,322,323,330,331,332,333,336,337,338,339,342,343,344,345,348,349,350,352,353,354,355,368,375,376,381,384,385,386,387,388,393,394,397,399,404,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,443,451,457,458,459,460,461,462,463,464,465,466,474,475,476,477,478,479,480,481,482,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,504,516,517,518,519,531,532,547,548,549,550,552,553,554,555,556,557,559,561,562,563,565,566,574,575,576,577,578,579,581,582,586,592,593,594,605,606,607,608,611,613,615,616,617,621,622,624,625,626,627,628,629,633,634,637,638,],[-290,141,-290,-286,-220,-121,-122,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-293,-289,224,-292,-285,-194,-195,-212,-220,-175,-174,-210,-133,-134,295,-251,311,-78,315,-327,-288,-290,-221,-287,324,-125,-160,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-123,-182,-211,-126,347,-253,-252,-257,-258,-259,-254,-255,311,-291,-284,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,412,-63,-65,-66,-67,-68,-250,-264,-265,-77,-326,-328,-329,-330,-294,-159,-205,-189,-191,-220,-79,-70,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,-256,324,543,-301,-302,-206,-192,-190,-193,-131,-132,-141,-62,-64,-69,-108,-109,-110,-111,-112,-113,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,311,324,-261,-262,-263,311,-266,-107,-114,-115,-117,-119,-120,587,-151,-96,-72,-27,591,-25,-39,-260,-71,311,-73,604,-308,-313,-313,-299,-300,-105,-41,-37,-38,-316,-311,-312,-316,-150,-29,-24,-26,-44,-307,-309,-310,-118,-28,-40,-42,-43,-314,-315,311,-74,]),'R_WHERE':([57,59,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,118,119,120,130,132,136,137,140,172,173,175,189,190,218,219,221,225,228,231,233,234,235,236,237,238,239,264,272,318,323,339,342,343,344,345,384,385,386,387,388,464,465,466,590,],[-290,135,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-14,-15,-16,-293,-289,-278,-292,135,-220,-175,-174,-133,-134,135,-327,-288,135,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-291,-124,-168,-127,-128,-129,-130,-326,-328,-329,-330,-294,-131,-132,-141,135,]),'R_GROUP':([57,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,130,132,136,137,140,162,163,166,172,173,175,179,189,190,221,223,225,226,228,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,264,265,272,318,319,323,330,331,332,333,336,337,338,339,342,343,344,345,348,388,394,397,399,460,461,462,463,464,465,466,],[-290,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-293,-289,-278,-292,-296,-194,-195,-212,-220,-175,-174,-210,-133,-134,-288,-295,-296,321,-221,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-182,-211,-126,-291,321,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-294,-205,-189,-191,-206,-192,-190,-193,-131,-132,-141,]),'R_LIMIT':([57,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,130,132,136,137,140,162,163,166,172,173,175,179,189,190,221,223,225,226,228,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,264,265,272,318,319,320,323,330,331,332,333,336,337,338,339,342,343,344,345,348,388,389,394,397,399,404,457,458,459,460,461,462,463,464,465,466,542,581,582,583,],[-290,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-293,-289,-278,-292,-296,-194,-195,-212,-220,-175,-174,-210,-133,-134,-288,-295,-296,-298,-221,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-182,-211,-126,-291,-298,391,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-294,391,-205,-189,-191,-220,-304,-301,-302,-206,-192,-190,-193,-131,-132,-141,-297,-299,-300,-303,]),'R_ORDER':([57,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,118,119,120,130,132,136,137,140,162,163,166,172,173,175,179,189,190,221,223,225,226,228,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,264,265,272,318,319,320,323,330,331,332,333,336,337,338,339,342,343,344,345,348,388,389,390,394,397,399,404,452,455,456,457,458,459,460,461,462,463,464,465,466,539,541,542,580,581,582,583,],[-290,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-14,-15,-16,-293,-289,-278,-292,-296,-194,-195,-212,-220,-175,-174,-210,-133,-134,-288,-295,-296,-298,-221,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-182,-211,-126,-291,-298,-319,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-294,-319,454,-205,-189,-191,-220,454,-321,-321,-304,-301,-302,-206,-192,-190,-193,-131,-132,-141,-317,-318,-297,-320,-299,-300,-303,]),'S_PUNTO':([70,172,404,],[143,266,266,]),'O_DIVISION':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,232,233,234,235,236,237,238,239,243,244,245,246,247,248,255,264,267,272,273,275,276,323,327,335,339,342,343,344,345,386,393,397,399,461,462,463,464,465,466,],[-220,148,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,148,-220,-175,-174,148,-133,-134,-221,-125,148,148,148,-163,-164,-165,-166,148,148,148,148,148,148,148,148,-182,148,-126,148,148,148,-124,148,148,-168,-127,-128,-129,-130,148,148,148,148,148,148,148,-131,-132,-141,]),'O_EXPONENTE':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,232,233,234,235,236,237,238,239,243,244,245,246,247,248,255,264,267,272,273,275,276,323,327,335,339,342,343,344,345,386,393,397,399,461,462,463,464,465,466,],[-220,149,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,149,-220,149,149,149,-133,-134,-221,-125,149,149,149,149,149,-165,149,149,149,149,149,149,149,149,149,-182,149,-126,149,149,149,-124,149,149,-168,-127,-128,-129,-130,149,149,149,149,149,149,149,-131,-132,-141,]),'O_MODULAR':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,232,233,234,235,236,237,238,239,243,244,245,246,247,248,255,264,267,272,273,275,276,323,327,335,339,342,343,344,345,386,393,397,399,461,462,463,464,465,466,],[-220,150,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,150,-220,-175,-174,150,-133,-134,-221,-125,150,150,150,-163,-164,-165,-166,150,150,150,150,150,150,150,150,-182,150,-126,150,150,150,-124,150,150,-168,-127,-128,-129,-130,150,150,150,150,150,150,150,-131,-132,-141,]),'OC_CONCATENAR':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,232,233,234,235,236,237,238,239,243,244,245,246,247,248,255,264,267,272,273,275,276,323,327,335,339,342,343,344,345,386,393,397,399,461,462,463,464,465,466,],[-220,151,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,151,-220,-175,-174,151,-133,-134,-221,-125,151,-161,-162,-163,-164,-165,-166,-167,151,151,151,151,151,151,151,-182,151,-126,151,151,151,-124,151,151,-168,-127,-128,-129,-130,151,151,151,151,151,151,151,-131,-132,-141,]),'R_IN':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,153,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,],[-220,152,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,241,152,-220,-175,-174,152,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,]),'OL_MENORQUE':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,522,523,524,525,526,527,528,529,],[-220,154,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,154,-220,-175,-174,154,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,567,-230,-231,-232,-233,-234,-235,-236,]),'OL_MAYORQUE':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,522,523,524,525,526,527,528,529,],[-220,155,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,155,-220,-175,-174,155,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,568,-230,-231,-232,-233,-234,-235,-236,]),'OL_MAYORIGUALQUE':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,522,523,524,525,526,527,528,529,],[-220,156,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,156,-220,-175,-174,156,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,569,-230,-231,-232,-233,-234,-235,-236,]),'OL_MENORIGUALQUE':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,522,523,524,525,526,527,528,529,],[-220,157,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,157,-220,-175,-174,157,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,570,-230,-231,-232,-233,-234,-235,-236,]),'S_IGUAL':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,220,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,359,434,464,465,466,522,523,524,525,526,527,528,529,],[-220,158,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,158,-220,-175,-174,158,-133,-134,316,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,437,506,-131,-132,-141,571,-230,-231,-232,-233,-234,-235,-236,]),'OL_DISTINTODE':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,522,523,524,525,526,527,528,529,],[-220,159,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,159,-220,-175,-174,159,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,572,-230,-231,-232,-233,-234,-235,-236,]),'R_IS':([70,71,72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,162,163,166,170,171,172,173,175,179,181,189,190,223,228,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,264,265,271,272,323,330,331,332,333,336,337,338,339,342,343,344,345,348,394,397,399,460,461,462,463,464,465,466,522,523,524,525,526,527,528,529,583,],[-220,160,167,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-194,-195,-212,160,167,-220,-175,-174,167,160,-133,-134,167,-221,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,167,167,-214,-215,-216,-182,-211,167,-126,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-205,-189,-191,-206,-192,-190,-193,-131,-132,-141,573,-230,-231,-232,-233,-234,-235,-236,167,]),'R_BETWEEN':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,153,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,],[-220,161,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,242,161,-220,-175,-174,161,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,]),'R_ISNULL':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,],[-220,162,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,162,-220,-175,-174,162,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,]),'R_NOTNULL':([70,71,77,78,79,80,81,82,85,86,87,88,89,90,91,97,99,100,170,172,173,175,181,189,190,228,231,233,234,235,236,237,238,239,264,272,323,339,342,343,344,345,464,465,466,],[-220,163,-176,-177,-178,-179,-180,-181,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,163,-220,-175,-174,163,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-182,-126,-124,-168,-127,-128,-129,-130,-131,-132,-141,]),'R_AND':([72,77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,162,163,166,171,172,173,175,179,189,190,223,228,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,255,257,258,259,260,261,264,265,271,272,323,327,330,331,332,333,335,336,337,338,339,342,343,344,345,348,394,397,399,460,461,462,463,464,465,466,583,],[164,-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-194,-195,-212,164,-220,-175,-174,164,-133,-134,164,-221,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,334,-208,-209,-214,-215,-216,-182,-211,164,-126,-124,396,-200,-201,-202,-203,400,-217,-218,-219,-168,-127,-128,-129,-130,-204,-205,-189,-191,-206,-192,-190,-193,-131,-132,-141,164,]),'R_WHEN':([76,85,86,87,88,89,90,91,176,177,269,401,],[178,-152,-153,-154,-155,-156,-157,-158,178,-170,-169,-171,]),'R_THEN':([77,78,79,80,81,82,84,85,86,87,88,89,90,91,97,99,100,102,162,163,166,172,173,175,179,189,190,228,231,233,234,235,236,237,238,239,243,244,245,246,247,248,251,252,253,254,257,258,259,260,261,264,265,271,272,323,330,331,332,333,336,337,338,339,342,343,344,345,348,394,397,399,460,461,462,463,464,465,466,],[-176,-177,-178,-179,-180,-181,-213,-152,-153,-154,-155,-156,-157,-158,-149,-147,-148,-207,-194,-195,-212,-220,-175,-174,-210,-133,-134,-221,-125,-161,-162,-163,-164,-165,-166,-167,-183,-184,-185,-186,-187,-188,-196,-197,-198,-199,-208,-209,-214,-215,-216,-182,-211,341,-126,-124,-200,-201,-202,-203,-217,-218,-219,-168,-127,-128,-129,-130,-204,-205,-189,-191,-206,-192,-190,-193,-131,-132,-141,]),'R_END':([85,86,87,88,89,90,91,176,177,268,269,340,401,],[-152,-153,-154,-155,-156,-157,-158,-173,-170,339,-169,-172,-171,]),'R_ELSE':([85,86,87,88,89,90,91,176,177,269,401,],[-152,-153,-154,-155,-156,-157,-158,270,-170,-169,-171,]),'R_DEFAULT':([85,86,87,88,89,90,91,316,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,441,476,477,478,479,480,481,482,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,547,548,549,550,552,553,556,586,625,],[-152,-153,-154,-155,-156,-157,-158,387,-79,483,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,483,483,-108,-109,-110,-111,-112,-113,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,-107,-114,-115,-117,-119,-120,-96,-105,-118,]),'R_PRIMARY':([85,86,87,88,89,90,91,207,286,412,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,476,477,478,479,480,481,482,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,547,548,549,550,552,553,556,586,625,],[-152,-153,-154,-155,-156,-157,-158,302,302,302,-79,487,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,487,-108,-109,-110,-111,-112,-113,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,-107,-114,-115,-117,-119,-120,-96,-105,-118,]),'R_REFERENCES':([85,86,87,88,89,90,91,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,476,477,478,479,480,481,482,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,547,548,549,550,552,553,556,586,603,625,],[-152,-153,-154,-155,-156,-157,-158,-79,488,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,488,-108,-109,-110,-111,-112,-113,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,-107,-114,-115,-117,-119,-120,-96,-105,620,-118,]),'R_CONSTRAINT':([85,86,87,88,89,90,91,207,208,286,412,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,476,477,478,479,480,481,482,485,489,490,492,493,494,495,496,497,498,499,500,501,502,503,547,548,549,550,552,553,556,586,625,],[-152,-153,-154,-155,-156,-157,-158,303,305,303,303,-79,303,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,303,-108,-109,-110,-111,-112,-113,-116,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,-107,-114,-115,-117,-119,-120,-96,-105,-118,]),'R_CHECK':([85,86,87,88,89,90,91,207,286,301,356,374,412,413,414,415,416,417,418,420,421,422,423,424,425,426,427,428,429,430,431,476,477,478,479,480,481,482,485,486,489,490,492,493,494,495,496,497,498,499,500,501,502,503,547,548,549,550,552,553,556,586,625,],[-152,-153,-154,-155,-156,-157,-158,-76,-76,371,371,-75,-76,-79,-76,-80,-81,-82,-83,-85,-86,-87,-88,-89,-90,-106,-106,-106,-106,-106,-104,-76,-108,-109,-110,-111,-112,-113,-116,551,-84,-91,-92,-93,-94,-106,-95,-97,-98,-99,-100,-101,-102,-103,-107,-114,-115,-117,-119,-120,-96,-105,-118,]),'R_ON':([112,197,198,],[-23,289,-22,]),'R_RENAME':([117,118,119,120,121,210,295,],[202,-14,-15,-16,209,310,209,]),'R_OWNER':([117,118,119,120,288,],[203,-14,-15,-16,359,]),'R_ADD':([118,119,120,121,295,],[-14,-15,-16,207,207,]),'R_MODE':([118,119,120,288,358,435,436,507,508,],[-14,-15,-16,-58,434,-54,-55,-56,-57,]),'R_VALUES':([127,216,383,],[-324,312,-323,]),'R_UNKNOWN':([160,167,250,262,],[254,261,333,338,]),'R_SYMMETRIC':([161,],[256,]),'R_YEAR':([186,431,],[278,498,]),'R_MONTH':([186,431,],[279,499,]),'R_DAY':([186,431,],[280,500,]),'R_HOUR':([186,431,],[281,501,]),'R_MINUTE':([186,431,],[282,502,]),'R_SECOND':([186,431,],[283,503,]),'R_TO':([202,203,310,377,],[291,292,380,448,]),'R_COLUMN':([204,207,208,209,309,],[294,297,306,308,379,]),'R_FOREIGN':([207,286,301,356,374,412,],[-76,-76,372,372,-75,-76,]),'R_HAVING':([228,404,457,458,459,581,582,],[-221,-220,544,-301,-302,-299,-300,]),'R_ASC':([228,404,559,563,578,579,613,626,],[-221,-220,-27,594,606,606,-29,-28,]),'R_DESC':([228,404,559,563,578,579,613,626,],[-221,-220,-27,593,607,607,-29,-28,]),'R_NULLS':([228,404,559,563,578,579,592,593,594,605,606,607,608,613,626,],[-221,-220,-27,-39,-313,-313,617,-37,-38,623,-311,-312,623,-29,-28,]),'R_ENUM':([290,],[361,]),'R_CURRENT_USER':([292,],[365,]),'R_SESSION_USER':([292,],[366,]),'R_KEY':([302,372,487,],[373,446,552,]),'R_BY':([321,454,],[392,538,]),'T_DATE':([347,351,369,442,],[407,424,424,424,]),'T_TIME':([347,351,369,442,],[408,425,425,425,]),'T_SMALLINT':([351,369,442,],[415,415,415,]),'T_INTEGER':([351,369,442,],[416,416,416,]),'T_BIGINT':([351,369,442,],[417,417,417,]),'T_REAL':([351,369,442,],[418,418,418,]),'T_DOUBLE':([351,369,442,],[419,419,419,]),'T_MONEY':([351,369,442,],[420,420,420,]),'T_TEXT':([351,369,442,],[421,421,421,]),'T_BOOLEAN':([351,369,442,],[422,422,422,]),'T_DECIMAL':([351,369,442,],[426,426,426,]),'T_NUMERIC':([351,369,442,],[427,427,427,]),'T_VARCHAR':([351,369,442,],[428,428,428,]),'T_CHARACTER':([351,369,442,],[429,429,429,]),'T_CHAR':([351,369,442,],[430,430,430,]),'R_USING':([360,],[439,]),'R_INHERITS':([411,],[473,]),'T_PRECISION':([419,],[489,]),'T_VARYING':([429,],[495,]),'R_HASH':([439,],[510,]),'R_BTREE':([439,],[511,]),'R_GIST':([439,],[512,]),'R_SPGIST':([439,],[513,]),'R_GIN':([439,],[514,]),'R_BRIN':([439,],[515,]),'R_OFFSET':([455,456,],[540,540,]),'R_FIRST':([617,623,],[628,633,]),'R_LAST':([617,623,],[629,634,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'stmtList':([0,],[2,]),'stmt':([0,2,],[3,25,]),'createStmt':([0,2,],[4,4,]),'showStmt':([0,2,],[5,5,]),'alterStmt':([0,2,],[6,6,]),'dropStmt':([0,2,],[7,7,]),'insertStmt':([0,2,],[8,8,]),'updateStmt':([0,2,],[9,9,]),'deleteStmt':([0,2,],[10,10,]),'truncateStmt':([0,2,],[11,11,]),'useStmt':([0,2,],[12,12,]),'selectStmt':([0,2,19,58,73,105,107,108,168,188,240,326,],[13,13,55,133,169,191,192,193,55,285,325,395,]),'createBody':([14,],[39,]),'createOpts':([14,],[40,]),'orReplace':([14,],[42,]),'indexUnique':([14,],[43,]),'fromBody':([20,60,224,],[56,137,318,]),'fromCl':([21,65,139,],[59,140,225,]),'tableOpt':([22,],[61,]),'selectParams':([24,64,],[65,139,]),'selectList':([24,64,],[67,67,]),'selectListParams':([24,64,141,],[68,68,227,]),'expresion':([24,64,141,],[69,69,69,]),'datatype':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[71,71,170,173,175,181,181,71,232,233,234,235,236,237,238,239,243,244,245,246,247,248,255,181,181,170,267,181,170,273,275,276,327,335,386,393,397,399,232,461,462,463,232,181,]),'expBool':([24,64,73,83,135,141,164,165,168,178,180,544,],[72,72,171,179,223,72,257,258,171,271,171,583,]),'columnName':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,346,382,392,396,398,400,440,538,543,544,604,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,403,77,458,77,77,77,77,578,581,77,578,]),'literal':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,270,316,324,328,334,341,382,396,398,400,440,483,491,544,587,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,340,78,78,78,78,401,78,78,78,78,78,548,555,78,611,]),'funcCall':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'extract':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'datePart':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'current':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,382,396,398,400,440,544,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'boolean':([24,64,73,83,135,141,164,165,168,178,180,544,],[84,84,84,84,84,84,84,84,84,84,84,84,]),'timeStamp':([24,64,73,74,75,83,135,141,144,145,146,147,148,149,150,151,154,155,156,157,158,159,161,164,165,168,174,178,180,183,184,185,242,256,316,324,328,334,346,382,396,398,400,440,544,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,402,97,97,97,97,97,97,]),'expComp':([24,64,73,83,135,141,164,165,168,178,180,544,],[102,102,102,102,102,102,102,102,102,102,102,102,]),'allOpt':([36,37,38,],[105,107,108,]),'ifNotExists':([41,44,111,],[109,113,196,]),'likeOpt':([47,],[115,]),'idOrString':([48,49,57,68,109,122,124,125,131,196,227,291,292,317,378,380,],[117,121,132,132,194,210,212,213,221,288,132,362,364,388,449,450,]),'ifExists':([50,51,52,53,],[122,124,125,126,]),'optAlias':([57,68,227,],[130,142,322,]),'whereCl':([59,140,218,225,590,],[134,226,314,319,614,]),'tableExp':([60,],[136,]),'optBoolPredicate':([72,171,179,223,257,258,271,583,],[166,166,166,166,166,166,166,166,]),'caseList':([76,],[176,]),'caseWhen':([76,176,],[177,269,]),'indexName':([112,],[197,]),'alterDb':([117,],[201,]),'alterTableList':([121,],[205,]),'alterTable':([121,295,],[206,368,]),'idList':([126,217,432,447,530,636,],[214,313,504,531,574,637,]),'paramsColumn':([127,],[216,]),'updateCols':([129,],[218,]),'updateVals':([129,315,],[219,384,]),'paramsList':([144,382,440,],[230,451,516,]),'optElse':([176,],[268,]),'optsExtract':([186,],[277,]),'alterAlter':([204,],[293,]),'alterAdd':([207,],[296,]),'createConstraint':([207,286,412,],[298,352,352,]),'createPrimary':([207,286,412,],[299,354,354,]),'createForeign':([207,286,412,],[300,355,355,]),'constrName':([207,286,412,414,476,],[301,356,356,486,486,]),'alterDrop':([208,],[304,]),'alterRename':([209,],[307,]),'groupByCl':([226,319,],[320,389,]),'createTableList':([286,],[349,]),'createTable':([286,412,],[350,474,]),'createUnique':([286,412,],[353,353,]),'createOwner':([288,],[358,]),'ownerOPts':([292,],[363,]),'column':([309,],[378,]),'updateExp':([316,],[385,]),'limitCl':([320,389,],[390,452,]),'dateSource':([347,],[405,]),'types':([351,369,442,],[414,443,519,]),'createMode':([358,],[433,]),'usingMethod':([360,],[438,]),'orderByCl':([390,452,],[453,537,]),'groupList':([392,],[457,]),'inheritsOpt':([411,],[472,]),'createColumns':([414,],[475,]),'colOptionsList':([414,],[476,]),'colOptions':([414,476,],[477,547,]),'defaultVal':([414,441,476,],[478,518,478,]),'nullOpt':([414,441,476,],[479,517,479,]),'constraintOpt':([414,476,],[480,480,]),'primaryOpt':([414,476,],[481,481,]),'referencesOpt':([414,476,],[482,482,]),'optParams':([426,427,428,429,430,495,],[490,492,493,494,496,556,]),'intervalFields':([431,],[497,]),'booleanCheck':([445,585,],[521,610,]),'idOrLiteral':([445,567,568,569,570,571,572,585,618,631,],[522,595,596,597,598,599,600,522,630,635,]),'idOrNumber':([449,],[533,]),'offsetLimit':([455,456,],[539,541,]),'havingCl':([457,],[542,]),'literalList':([491,],[554,]),'indexList':([509,],[561,]),'columnIndex':([509,591,],[562,615,]),'columnOpt':([509,560,591,],[563,589,563,]),'orderList':([538,],[576,]),'orderByElem':([538,604,],[577,621,]),'indexOrder':([563,],[592,]),'orderOpts':([578,579,],[605,608,]),'indexNull':([592,],[616,]),'orderNull':([605,608,],[622,624,]),'firstLast':([617,],[627,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> stmtList','init',1,'p_init','grammar.py',51),
  ('stmtList -> stmtList stmt','stmtList',2,'p_stmt_list','grammar.py',57),
  ('stmtList -> stmt','stmtList',1,'p_stmt_u','grammar.py',64),
  ('stmt -> createStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',71),
  ('stmt -> showStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',72),
  ('stmt -> alterStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',73),
  ('stmt -> dropStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',74),
  ('stmt -> insertStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',75),
  ('stmt -> updateStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',76),
  ('stmt -> deleteStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',77),
  ('stmt -> truncateStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',78),
  ('stmt -> useStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',79),
  ('stmt -> selectStmt S_PUNTOCOMA','stmt',2,'p_stmt','grammar.py',80),
  ('idOrString -> ID','idOrString',1,'p_id_string','grammar.py',98),
  ('idOrString -> STRING','idOrString',1,'p_id_string','grammar.py',99),
  ('idOrString -> CHARACTER','idOrString',1,'p_id_string','grammar.py',100),
  ('createStmt -> R_CREATE createBody','createStmt',2,'p_createstmt','grammar.py',107),
  ('createBody -> createOpts','createBody',1,'p_createbody','grammar.py',114),
  ('createOpts -> R_TABLE ifNotExists idOrString S_PARIZQ createTableList S_PARDER inheritsOpt','createOpts',7,'p_createopts_table','grammar.py',121),
  ('createOpts -> orReplace R_DATABASE ifNotExists idOrString createOwner createMode','createOpts',6,'p_createopts_db','grammar.py',130),
  ('createOpts -> indexUnique R_INDEX indexName R_ON ID usingMethod S_PARIZQ indexList S_PARDER whereCl','createOpts',10,'p_createopts_index','grammar.py',140),
  ('indexName -> ID','indexName',1,'p_indexName','grammar.py',148),
  ('indexName -> <empty>','indexName',0,'p_indexName_n','grammar.py',156),
  ('indexList -> indexList S_COMA columnIndex','indexList',3,'p_indexList','grammar.py',164),
  ('indexList -> columnIndex','indexList',1,'p_indexList2','grammar.py',173),
  ('columnIndex -> columnOpt indexOrder indexNull','columnIndex',3,'p_columnIndex','grammar.py',181),
  ('columnOpt -> ID','columnOpt',1,'p_index_columnOpt','grammar.py',189),
  ('columnOpt -> ID S_PARIZQ ID S_PARDER','columnOpt',4,'p_index_functionIndex','grammar.py',197),
  ('columnOpt -> S_PARIZQ columnOpt S_PARDER','columnOpt',3,'p_index_agrupacion','grammar.py',205),
  ('usingMethod -> R_USING R_HASH','usingMethod',2,'p_usingMethod','grammar.py',213),
  ('usingMethod -> R_USING R_BTREE','usingMethod',2,'p_usingMethod','grammar.py',214),
  ('usingMethod -> R_USING R_GIST','usingMethod',2,'p_usingMethod','grammar.py',215),
  ('usingMethod -> R_USING R_SPGIST','usingMethod',2,'p_usingMethod','grammar.py',216),
  ('usingMethod -> R_USING R_GIN','usingMethod',2,'p_usingMethod','grammar.py',217),
  ('usingMethod -> R_USING R_BRIN','usingMethod',2,'p_usingMethod','grammar.py',218),
  ('usingMethod -> <empty>','usingMethod',0,'p_usingMethod_none','grammar.py',226),
  ('indexOrder -> R_DESC','indexOrder',1,'p_indexOrder','grammar.py',234),
  ('indexOrder -> R_ASC','indexOrder',1,'p_indexOrder','grammar.py',235),
  ('indexOrder -> <empty>','indexOrder',0,'p_indexOrder','grammar.py',236),
  ('indexNull -> R_NULLS firstLast','indexNull',2,'p_indexNull','grammar.py',247),
  ('indexNull -> <empty>','indexNull',0,'p_indexNull','grammar.py',248),
  ('firstLast -> R_FIRST','firstLast',1,'p_indexFirstLast','grammar.py',259),
  ('firstLast -> R_LAST','firstLast',1,'p_indexFirstLast','grammar.py',260),
  ('firstLast -> <empty>','firstLast',0,'p_indexFirstLast','grammar.py',261),
  ('indexUnique -> R_UNIQUE','indexUnique',1,'p_createindex_unique','grammar.py',272),
  ('indexUnique -> <empty>','indexUnique',0,'p_createindex_unique','grammar.py',273),
  ('orReplace -> R_OR R_REPLACE','orReplace',2,'p_replace_true','grammar.py',284),
  ('orReplace -> <empty>','orReplace',0,'p_replace_false','grammar.py',292),
  ('createOpts -> R_TYPE ifNotExists ID R_AS R_ENUM S_PARIZQ paramsList S_PARDER','createOpts',8,'p_createopts_type','grammar.py',300),
  ('ifNotExists -> R_IF R_NOT R_EXISTS','ifNotExists',3,'p_ifnotexists_true','grammar.py',310),
  ('ifNotExists -> <empty>','ifNotExists',0,'p_ifnotexists_false','grammar.py',318),
  ('inheritsOpt -> R_INHERITS S_PARIZQ ID S_PARDER','inheritsOpt',4,'p_inheritsOpt','grammar.py',326),
  ('inheritsOpt -> <empty>','inheritsOpt',0,'p_inheritsOpt_none','grammar.py',334),
  ('createOwner -> R_OWNER ID','createOwner',2,'p_createowner','grammar.py',342),
  ('createOwner -> R_OWNER STRING','createOwner',2,'p_createowner','grammar.py',343),
  ('createOwner -> R_OWNER S_IGUAL ID','createOwner',3,'p_createowner_asg','grammar.py',351),
  ('createOwner -> R_OWNER S_IGUAL STRING','createOwner',3,'p_createowner_asg','grammar.py',352),
  ('createOwner -> <empty>','createOwner',0,'p_createowner_none','grammar.py',360),
  ('createMode -> R_MODE INTEGER','createMode',2,'p_createmode','grammar.py',368),
  ('createMode -> R_MODE S_IGUAL INTEGER','createMode',3,'p_createMode_asg','grammar.py',376),
  ('createMode -> <empty>','createMode',0,'p_createmode_none','grammar.py',384),
  ('createTableList -> createTableList S_COMA createTable','createTableList',3,'p_createtable_list','grammar.py',391),
  ('createTableList -> createTable','createTableList',1,'p_createtable_u','grammar.py',398),
  ('createTable -> ID types createColumns','createTable',3,'p_createTable_id','grammar.py',405),
  ('createTable -> createConstraint','createTable',1,'p_createTable','grammar.py',413),
  ('createTable -> createUnique','createTable',1,'p_createTable','grammar.py',414),
  ('createTable -> createPrimary','createTable',1,'p_createTable','grammar.py',415),
  ('createTable -> createForeign','createTable',1,'p_createTable','grammar.py',416),
  ('createColumns -> colOptionsList','createColumns',1,'p_createColumNs','grammar.py',424),
  ('createColumns -> <empty>','createColumns',0,'p_createColumNs_none','grammar.py',432),
  ('createConstraint -> constrName R_CHECK S_PARIZQ booleanCheck S_PARDER','createConstraint',5,'p_createConstraint','grammar.py',439),
  ('createUnique -> R_UNIQUE S_PARIZQ idList S_PARDER','createUnique',4,'p_createUnique','grammar.py',445),
  ('createPrimary -> R_PRIMARY R_KEY S_PARIZQ idList S_PARDER','createPrimary',5,'p_createPrimary','grammar.py',451),
  ('createForeign -> constrName R_FOREIGN R_KEY S_PARIZQ idList S_PARDER R_REFERENCES ID S_PARIZQ idList S_PARDER','createForeign',11,'p_createForeign','grammar.py',458),
  ('constrName -> R_CONSTRAINT ID','constrName',2,'p_constrName','grammar.py',466),
  ('constrName -> <empty>','constrName',0,'p_constrName_none','grammar.py',474),
  ('idList -> idList S_COMA ID','idList',3,'p_id_list','grammar.py',481),
  ('idList -> ID','idList',1,'p_id_u','grammar.py',488),
  ('types -> ID','types',1,'p_types','grammar.py',495),
  ('types -> T_SMALLINT','types',1,'p_types_simple','grammar.py',503),
  ('types -> T_INTEGER','types',1,'p_types_simple','grammar.py',504),
  ('types -> T_BIGINT','types',1,'p_types_simple','grammar.py',505),
  ('types -> T_REAL','types',1,'p_types_simple','grammar.py',506),
  ('types -> T_DOUBLE T_PRECISION','types',2,'p_types_simple','grammar.py',507),
  ('types -> T_MONEY','types',1,'p_types_simple','grammar.py',508),
  ('types -> T_TEXT','types',1,'p_types_simple','grammar.py',509),
  ('types -> T_BOOLEAN','types',1,'p_types_simple','grammar.py',510),
  ('types -> R_TIMESTAMP','types',1,'p_types_simple','grammar.py',511),
  ('types -> T_DATE','types',1,'p_types_simple','grammar.py',512),
  ('types -> T_TIME','types',1,'p_types_simple','grammar.py',513),
  ('types -> T_DECIMAL optParams','types',2,'p_types_params','grammar.py',522),
  ('types -> T_NUMERIC optParams','types',2,'p_types_params','grammar.py',523),
  ('types -> T_VARCHAR optParams','types',2,'p_types_params','grammar.py',524),
  ('types -> T_CHARACTER optParams','types',2,'p_types_params','grammar.py',525),
  ('types -> T_CHAR optParams','types',2,'p_types_params','grammar.py',526),
  ('types -> T_CHARACTER T_VARYING optParams','types',3,'p_types_var','grammar.py',534),
  ('types -> R_INTERVAL intervalFields','types',2,'p_timeType_interval','grammar.py',542),
  ('intervalFields -> R_YEAR','intervalFields',1,'p_intervalFields','grammar.py',550),
  ('intervalFields -> R_MONTH','intervalFields',1,'p_intervalFields','grammar.py',551),
  ('intervalFields -> R_DAY','intervalFields',1,'p_intervalFields','grammar.py',552),
  ('intervalFields -> R_HOUR','intervalFields',1,'p_intervalFields','grammar.py',553),
  ('intervalFields -> R_MINUTE','intervalFields',1,'p_intervalFields','grammar.py',554),
  ('intervalFields -> R_SECOND','intervalFields',1,'p_intervalFields','grammar.py',555),
  ('intervalFields -> <empty>','intervalFields',0,'p_intervalFields_none','grammar.py',563),
  ('optParams -> S_PARIZQ literalList S_PARDER','optParams',3,'p_optParams','grammar.py',570),
  ('optParams -> <empty>','optParams',0,'p_optParams_none','grammar.py',576),
  ('colOptionsList -> colOptionsList colOptions','colOptionsList',2,'p_colOptions_list','grammar.py',582),
  ('colOptionsList -> colOptions','colOptionsList',1,'p_colOptions_u','grammar.py',589),
  ('colOptions -> defaultVal','colOptions',1,'p_colOptions','grammar.py',596),
  ('colOptions -> nullOpt','colOptions',1,'p_colOptions','grammar.py',597),
  ('colOptions -> constraintOpt','colOptions',1,'p_colOptions','grammar.py',598),
  ('colOptions -> primaryOpt','colOptions',1,'p_colOptions','grammar.py',599),
  ('colOptions -> referencesOpt','colOptions',1,'p_colOptions','grammar.py',600),
  ('defaultVal -> R_DEFAULT literal','defaultVal',2,'p_defaultVal','grammar.py',608),
  ('nullOpt -> R_NOT R_NULL','nullOpt',2,'p_nullOpt_true','grammar.py',615),
  ('nullOpt -> R_NULL','nullOpt',1,'p_nullOpt_false','grammar.py',623),
  ('constraintOpt -> constrName R_UNIQUE','constraintOpt',2,'p_constraintOpt_unique','grammar.py',634),
  ('constraintOpt -> constrName R_CHECK S_PARIZQ booleanCheck S_PARDER','constraintOpt',5,'p_constraintOpt_check','grammar.py',642),
  ('primaryOpt -> R_PRIMARY R_KEY','primaryOpt',2,'p_primaryOpt','grammar.py',649),
  ('referencesOpt -> R_REFERENCES ID','referencesOpt',2,'p_referencesOpt','grammar.py',655),
  ('expresion -> datatype','expresion',1,'p_expresion','grammar.py',667),
  ('expresion -> expBool','expresion',1,'p_expresion','grammar.py',668),
  ('expresion -> S_PARIZQ selectStmt S_PARDER','expresion',3,'p_expresion_','grammar.py',676),
  ('funcCall -> ID S_PARIZQ paramsList S_PARDER','funcCall',4,'p_funcCall_1','grammar.py',684),
  ('funcCall -> ID S_PARIZQ S_PARDER','funcCall',3,'p_funcCall_2','grammar.py',692),
  ('funcCall -> R_NOW S_PARIZQ S_PARDER','funcCall',3,'p_funcCall_2','grammar.py',693),
  ('funcCall -> R_COUNT S_PARIZQ datatype S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',701),
  ('funcCall -> R_COUNT S_PARIZQ O_PRODUCTO S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',702),
  ('funcCall -> R_SUM S_PARIZQ datatype S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',703),
  ('funcCall -> R_PROM S_PARIZQ datatype S_PARDER','funcCall',4,'p_funcCall_3','grammar.py',704),
  ('extract -> R_EXTRACT S_PARIZQ optsExtract R_FROM timeStamp S_PARDER','extract',6,'p_extract_1','grammar.py',714),
  ('extract -> R_EXTRACT S_PARIZQ optsExtract R_FROM columnName S_PARDER','extract',6,'p_extract_2','grammar.py',724),
  ('timeStamp -> R_TIMESTAMP STRING','timeStamp',2,'p_timeStamp','grammar.py',734),
  ('timeStamp -> R_INTERVAL STRING','timeStamp',2,'p_timeStamp','grammar.py',735),
  ('optsExtract -> R_YEAR','optsExtract',1,'p_optsExtract','grammar.py',743),
  ('optsExtract -> R_MONTH','optsExtract',1,'p_optsExtract','grammar.py',744),
  ('optsExtract -> R_DAY','optsExtract',1,'p_optsExtract','grammar.py',745),
  ('optsExtract -> R_HOUR','optsExtract',1,'p_optsExtract','grammar.py',746),
  ('optsExtract -> R_MINUTE','optsExtract',1,'p_optsExtract','grammar.py',747),
  ('optsExtract -> R_SECOND','optsExtract',1,'p_optsExtract','grammar.py',748),
  ('datePart -> R_DATE_PART S_PARIZQ STRING S_COMA dateSource S_PARDER','datePart',6,'p_datePart','grammar.py',756),
  ('dateSource -> R_TIMESTAMP STRING','dateSource',2,'p_dateSource','grammar.py',766),
  ('dateSource -> T_DATE STRING','dateSource',2,'p_dateSource','grammar.py',767),
  ('dateSource -> T_TIME STRING','dateSource',2,'p_dateSource','grammar.py',768),
  ('dateSource -> R_INTERVAL STRING','dateSource',2,'p_dateSource','grammar.py',769),
  ('dateSource -> R_NOW S_PARIZQ S_PARDER','dateSource',3,'p_dateSource','grammar.py',770),
  ('current -> R_CURRENT_DATE','current',1,'p_current','grammar.py',778),
  ('current -> R_CURRENT_TIME','current',1,'p_current','grammar.py',779),
  ('current -> timeStamp','current',1,'p_current_1','grammar.py',788),
  ('literalList -> literalList S_COMA literal','literalList',3,'p_literal_list','grammar.py',795),
  ('literalList -> literal','literalList',1,'p_literal_u','grammar.py',802),
  ('literal -> INTEGER','literal',1,'p_literal','grammar.py',809),
  ('literal -> STRING','literal',1,'p_literal','grammar.py',810),
  ('literal -> DECIMAL','literal',1,'p_literal','grammar.py',811),
  ('literal -> CHARACTER','literal',1,'p_literal','grammar.py',812),
  ('literal -> R_TRUE','literal',1,'p_literal','grammar.py',813),
  ('literal -> R_FALSE','literal',1,'p_literal','grammar.py',814),
  ('literal -> R_NULL','literal',1,'p_literal','grammar.py',815),
  ('paramsList -> paramsList S_COMA datatype','paramsList',3,'p_params_list','grammar.py',833),
  ('paramsList -> datatype','paramsList',1,'p_params_u','grammar.py',840),
  ('datatype -> datatype O_SUMA datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',847),
  ('datatype -> datatype O_RESTA datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',848),
  ('datatype -> datatype O_PRODUCTO datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',849),
  ('datatype -> datatype O_DIVISION datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',850),
  ('datatype -> datatype O_EXPONENTE datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',851),
  ('datatype -> datatype O_MODULAR datatype','datatype',3,'p_datatype_operadores_binarios1','grammar.py',852),
  ('datatype -> datatype OC_CONCATENAR datatype','datatype',3,'p_datatype_operadores_binarios2','grammar.py',861),
  ('datatype -> R_CASE caseList optElse R_END','datatype',4,'p_datatype_case_when','grammar.py',869),
  ('caseList -> caseList caseWhen','caseList',2,'p_case_list','grammar.py',876),
  ('caseList -> caseWhen','caseList',1,'p_case_list','grammar.py',877),
  ('caseWhen -> R_WHEN expBool R_THEN literal','caseWhen',4,'p_caseWhen','grammar.py',883),
  ('optElse -> R_ELSE literal','optElse',2,'p_caseWhen_2','grammar.py',888),
  ('optElse -> <empty>','optElse',0,'p_caseWhen_2','grammar.py',889),
  ('datatype -> O_RESTA datatype','datatype',2,'p_datatype_operadores_unarios','grammar.py',896),
  ('datatype -> O_SUMA datatype','datatype',2,'p_datatype_operadores_unarios','grammar.py',897),
  ('datatype -> columnName','datatype',1,'p_datatype_operandos','grammar.py',905),
  ('datatype -> literal','datatype',1,'p_datatype_operandos','grammar.py',906),
  ('datatype -> funcCall','datatype',1,'p_datatype_operandos','grammar.py',907),
  ('datatype -> extract','datatype',1,'p_datatype_operandos','grammar.py',908),
  ('datatype -> datePart','datatype',1,'p_datatype_operandos','grammar.py',909),
  ('datatype -> current','datatype',1,'p_datatype_operandos','grammar.py',910),
  ('datatype -> S_PARIZQ datatype S_PARDER','datatype',3,'p_datatype_agrupacion','grammar.py',918),
  ('expComp -> datatype OL_MENORQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',926),
  ('expComp -> datatype OL_MAYORQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',927),
  ('expComp -> datatype OL_MAYORIGUALQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',928),
  ('expComp -> datatype OL_MENORIGUALQUE datatype','expComp',3,'p_expCompBinario_1','grammar.py',929),
  ('expComp -> datatype S_IGUAL datatype','expComp',3,'p_expCompBinario_1','grammar.py',930),
  ('expComp -> datatype OL_DISTINTODE datatype','expComp',3,'p_expCompBinario_1','grammar.py',931),
  ('expComp -> datatype R_IS R_DISTINCT R_FROM datatype','expComp',5,'p_expCompBinario_2','grammar.py',939),
  ('expComp -> datatype R_IS R_NOT R_DISTINCT R_FROM datatype','expComp',6,'p_expCompBinario_3','grammar.py',949),
  ('expComp -> datatype R_BETWEEN datatype R_AND datatype','expComp',5,'p_expComp_ternario_1','grammar.py',959),
  ('expComp -> datatype R_NOT R_BETWEEN datatype R_AND datatype','expComp',6,'p_expComp_ternario_2','grammar.py',969),
  ('expComp -> datatype R_BETWEEN R_SYMMETRIC datatype R_AND datatype','expComp',6,'p_expComp_ternario_2','grammar.py',970),
  ('expComp -> datatype R_ISNULL','expComp',2,'p_expComp_unario_1','grammar.py',981),
  ('expComp -> datatype R_NOTNULL','expComp',2,'p_expComp_unario_1','grammar.py',982),
  ('expComp -> datatype R_IS R_NULL','expComp',3,'p_expComp_unario_2','grammar.py',991),
  ('expComp -> datatype R_IS R_TRUE','expComp',3,'p_expComp_unario_2','grammar.py',992),
  ('expComp -> datatype R_IS R_FALSE','expComp',3,'p_expComp_unario_2','grammar.py',993),
  ('expComp -> datatype R_IS R_UNKNOWN','expComp',3,'p_expComp_unario_2','grammar.py',994),
  ('expComp -> datatype R_IS R_NOT R_NULL','expComp',4,'p_expComp_unario_3','grammar.py',1002),
  ('expComp -> datatype R_IS R_NOT R_TRUE','expComp',4,'p_expComp_unario_3','grammar.py',1003),
  ('expComp -> datatype R_IS R_NOT R_FALSE','expComp',4,'p_expComp_unario_3','grammar.py',1004),
  ('expComp -> datatype R_IS R_NOT R_UNKNOWN','expComp',4,'p_expComp_unario_3','grammar.py',1005),
  ('boolean -> R_EXISTS S_PARIZQ selectStmt S_PARDER','boolean',4,'p_boolean_1','grammar.py',1015),
  ('boolean -> datatype R_IN S_PARIZQ selectStmt S_PARDER','boolean',5,'p_boolean_2','grammar.py',1025),
  ('boolean -> datatype R_NOT R_IN S_PARIZQ selectStmt S_PARDER','boolean',6,'p_boolean_3','grammar.py',1033),
  ('boolean -> expComp','boolean',1,'p_boolean_4','grammar.py',1041),
  ('expBool -> expBool R_AND expBool','expBool',3,'p_expBool_1','grammar.py',1049),
  ('expBool -> expBool R_OR expBool','expBool',3,'p_expBool_1','grammar.py',1050),
  ('expBool -> R_NOT expBool','expBool',2,'p_expBool_2','grammar.py',1058),
  ('expBool -> S_PARIZQ expBool S_PARDER','expBool',3,'p_expBool_3','grammar.py',1066),
  ('expBool -> expBool optBoolPredicate','expBool',2,'p_expBool_5','grammar.py',1074),
  ('expBool -> boolean','expBool',1,'p_expBool_4','grammar.py',1082),
  ('optBoolPredicate -> R_IS R_TRUE','optBoolPredicate',2,'p_optBoolPredicate_1','grammar.py',1090),
  ('optBoolPredicate -> R_IS R_FALSE','optBoolPredicate',2,'p_optBoolPredicate_1','grammar.py',1091),
  ('optBoolPredicate -> R_IS R_UNKNOWN','optBoolPredicate',2,'p_optBoolPredicate_1','grammar.py',1092),
  ('optBoolPredicate -> R_IS R_NOT R_TRUE','optBoolPredicate',3,'p_optBoolPredicate_2','grammar.py',1100),
  ('optBoolPredicate -> R_IS R_NOT R_FALSE','optBoolPredicate',3,'p_optBoolPredicate_2','grammar.py',1101),
  ('optBoolPredicate -> R_IS R_NOT R_UNKNOWN','optBoolPredicate',3,'p_optBoolPredicate_2','grammar.py',1102),
  ('columnName -> ID','columnName',1,'p_columnName_id','grammar.py',1110),
  ('columnName -> ID S_PUNTO ID','columnName',3,'p_columnName_table_id','grammar.py',1119),
  ('booleanCheck -> idOrLiteral OL_MENORQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1137),
  ('booleanCheck -> idOrLiteral OL_MAYORQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1138),
  ('booleanCheck -> idOrLiteral OL_MAYORIGUALQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1139),
  ('booleanCheck -> idOrLiteral OL_MENORIGUALQUE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1140),
  ('booleanCheck -> idOrLiteral S_IGUAL idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1141),
  ('booleanCheck -> idOrLiteral OL_DISTINTODE idOrLiteral','booleanCheck',3,'p_booleanCheck_1','grammar.py',1142),
  ('booleanCheck -> idOrLiteral R_IS R_DISTINCT R_FROM idOrLiteral','booleanCheck',5,'p_booleanCheck_2','grammar.py',1150),
  ('booleanCheck -> idOrLiteral R_IS R_NOT R_DISTINCT R_FROM idOrLiteral','booleanCheck',6,'p_booleanCheck_3','grammar.py',1158),
  ('idOrLiteral -> ID','idOrLiteral',1,'p_idOrLiteral','grammar.py',1166),
  ('idOrLiteral -> INTEGER','idOrLiteral',1,'p_idOrLiteral','grammar.py',1167),
  ('idOrLiteral -> STRING','idOrLiteral',1,'p_idOrLiteral','grammar.py',1168),
  ('idOrLiteral -> DECIMAL','idOrLiteral',1,'p_idOrLiteral','grammar.py',1169),
  ('idOrLiteral -> CHARACTER','idOrLiteral',1,'p_idOrLiteral','grammar.py',1170),
  ('idOrLiteral -> R_TRUE','idOrLiteral',1,'p_idOrLiteral','grammar.py',1171),
  ('idOrLiteral -> R_FALSE','idOrLiteral',1,'p_idOrLiteral','grammar.py',1172),
  ('alterStmt -> R_ALTER R_DATABASE idOrString alterDb','alterStmt',4,'p_alterStmt','grammar.py',1199),
  ('alterStmt -> R_ALTER R_TABLE idOrString alterTableList','alterStmt',4,'p_alterStmt','grammar.py',1200),
  ('alterStmt -> R_ALTER R_INDEX ifExists idOrString R_RENAME R_TO idOrString','alterStmt',7,'p_alterStmt','grammar.py',1201),
  ('alterStmt -> R_ALTER R_INDEX ifExists idOrString R_ALTER column idOrString idOrNumber','alterStmt',8,'p_alterStmt','grammar.py',1202),
  ('column -> R_COLUMN','column',1,'p_column','grammar.py',1224),
  ('column -> <empty>','column',0,'p_column','grammar.py',1225),
  ('idOrNumber -> ID','idOrNumber',1,'p_idOrNumber','grammar.py',1231),
  ('idOrNumber -> INTEGER','idOrNumber',1,'p_idOrNumber','grammar.py',1232),
  ('alterDb -> R_RENAME R_TO idOrString','alterDb',3,'p_alterDb','grammar.py',1239),
  ('alterDb -> R_OWNER R_TO ownerOPts','alterDb',3,'p_alterDb','grammar.py',1240),
  ('ownerOPts -> idOrString','ownerOPts',1,'p_ownerOpts','grammar.py',1248),
  ('ownerOPts -> R_CURRENT_USER','ownerOPts',1,'p_ownerOpts','grammar.py',1249),
  ('ownerOPts -> R_SESSION_USER','ownerOPts',1,'p_ownerOpts','grammar.py',1250),
  ('alterTableList -> alterTableList S_COMA alterTable','alterTableList',3,'p_alterTableList','grammar.py',1258),
  ('alterTableList -> alterTable','alterTableList',1,'p_alterTableList_u','grammar.py',1267),
  ('alterTable -> R_ADD alterAdd','alterTable',2,'p_alterTable','grammar.py',1275),
  ('alterTable -> R_ALTER alterAlter','alterTable',2,'p_alterTable','grammar.py',1276),
  ('alterTable -> R_DROP alterDrop','alterTable',2,'p_alterTable','grammar.py',1277),
  ('alterTable -> R_RENAME alterRename','alterTable',2,'p_alterTable','grammar.py',1278),
  ('alterAdd -> R_COLUMN ID types','alterAdd',3,'p_alterAdd_column','grammar.py',1286),
  ('alterAdd -> createConstraint','alterAdd',1,'p_alterAdd_constraint','grammar.py',1294),
  ('alterAdd -> createPrimary','alterAdd',1,'p_alterAdd_constraint','grammar.py',1295),
  ('alterAdd -> createForeign','alterAdd',1,'p_alterAdd_constraint','grammar.py',1296),
  ('alterAdd -> constrName R_UNIQUE S_PARIZQ ID S_PARDER','alterAdd',5,'p_alterAdd_unique','grammar.py',1304),
  ('alterAlter -> R_COLUMN ID R_SET nullOpt','alterAlter',4,'p_alterAlter','grammar.py',1312),
  ('alterAlter -> R_COLUMN ID R_SET defaultVal','alterAlter',4,'p_alterAlter','grammar.py',1313),
  ('alterAlter -> R_COLUMN ID R_TYPE types','alterAlter',4,'p_alterAlter','grammar.py',1314),
  ('alterDrop -> R_CONSTRAINT ID','alterDrop',2,'p_alterDrop','grammar.py',1322),
  ('alterDrop -> R_COLUMN ID','alterDrop',2,'p_alterDrop','grammar.py',1323),
  ('alterRename -> R_COLUMN ID R_TO ID','alterRename',4,'p_alterRename','grammar.py',1331),
  ('dropStmt -> R_DROP R_TABLE ifExists idOrString','dropStmt',4,'p_dropStmt','grammar.py',1349),
  ('dropStmt -> R_DROP R_DATABASE ifExists idOrString','dropStmt',4,'p_dropStmt','grammar.py',1350),
  ('dropStmt -> R_DROP R_INDEX ifExists idList','dropStmt',4,'p_dropStmt_index','grammar.py',1361),
  ('ifExists -> R_IF R_EXISTS','ifExists',2,'p_ifExists','grammar.py',1368),
  ('ifExists -> <empty>','ifExists',0,'p_ifExists_none','grammar.py',1374),
  ('selectStmt -> R_SELECT R_DISTINCT selectParams fromCl whereCl groupByCl limitCl orderByCl','selectStmt',8,'p_selectStmt_1','grammar.py',1386),
  ('selectStmt -> R_SELECT selectParams fromCl whereCl groupByCl limitCl orderByCl','selectStmt',7,'p_selectStmt_2','grammar.py',1404),
  ('selectStmt -> selectStmt R_UNION allOpt selectStmt','selectStmt',4,'p_selectStmt_union','grammar.py',1421),
  ('selectStmt -> selectStmt R_INTERSECT allOpt selectStmt','selectStmt',4,'p_selectStmt_intersect','grammar.py',1427),
  ('selectStmt -> selectStmt R_EXCEPT allOpt selectStmt','selectStmt',4,'p_selectStmt_except','grammar.py',1433),
  ('selectStmt -> S_PARIZQ selectStmt S_PARDER','selectStmt',3,'p_selectStmt_agrupacion','grammar.py',1439),
  ('fromCl -> R_FROM tableExp','fromCl',2,'p_fromClause','grammar.py',1446),
  ('selectStmt -> R_SELECT selectParams','selectStmt',2,'p_selectstmt_only_params','grammar.py',1460),
  ('allOpt -> R_ALL','allOpt',1,'p_allOpt','grammar.py',1466),
  ('allOpt -> <empty>','allOpt',0,'p_allOpt','grammar.py',1467),
  ('selectParams -> O_PRODUCTO','selectParams',1,'p_selectparams_all','grammar.py',1474),
  ('selectParams -> selectList','selectParams',1,'p_selectparams_params','grammar.py',1480),
  ('selectList -> selectList S_COMA selectListParams optAlias','selectList',4,'p_selectList_list','grammar.py',1487),
  ('selectList -> selectListParams optAlias','selectList',2,'p_selectList_u','grammar.py',1497),
  ('selectListParams -> expresion','selectListParams',1,'p_selectListParams_1','grammar.py',1506),
  ('selectListParams -> ID S_PUNTO O_PRODUCTO','selectListParams',3,'p_selectListParams_2','grammar.py',1512),
  ('optAlias -> R_AS idOrString','optAlias',2,'p_optalias_as','grammar.py',1519),
  ('optAlias -> idOrString','optAlias',1,'p_optalias_id','grammar.py',1527),
  ('optAlias -> <empty>','optAlias',0,'p_optalias_none','grammar.py',1534),
  ('tableExp -> tableExp S_COMA fromBody','tableExp',3,'p_tableexp_list','grammar.py',1540),
  ('tableExp -> fromBody','tableExp',1,'p_tableexp_u','grammar.py',1547),
  ('fromBody -> ID optAlias','fromBody',2,'p_fromBody','grammar.py',1553),
  ('fromBody -> S_PARIZQ selectStmt S_PARDER R_AS idOrString','fromBody',5,'p_tableexp_subq','grammar.py',1562),
  ('whereCl -> R_WHERE expBool','whereCl',2,'p_whereCl','grammar.py',1569),
  ('whereCl -> <empty>','whereCl',0,'p_whereCl_none','grammar.py',1578),
  ('groupByCl -> R_GROUP R_BY groupList havingCl','groupByCl',4,'p_groupByCl_1','grammar.py',1585),
  ('groupByCl -> <empty>','groupByCl',0,'p_groupByCl_2','grammar.py',1593),
  ('groupList -> groupList S_COMA columnName','groupList',3,'p_groupList_1','grammar.py',1601),
  ('groupList -> groupList S_COMA INTEGER','groupList',3,'p_groupList_1','grammar.py',1602),
  ('groupList -> columnName','groupList',1,'p_groupList_2','grammar.py',1611),
  ('groupList -> INTEGER','groupList',1,'p_groupList_2','grammar.py',1612),
  ('havingCl -> R_HAVING expBool','havingCl',2,'p_havingCl_1','grammar.py',1619),
  ('havingCl -> <empty>','havingCl',0,'p_havingCl_2','grammar.py',1625),
  ('orderByCl -> R_ORDER R_BY orderList','orderByCl',3,'p_orderByCl','grammar.py',1631),
  ('orderByCl -> <empty>','orderByCl',0,'p_orderByCl_n','grammar.py',1637),
  ('orderList -> orderList S_COMA orderByElem','orderList',3,'p_orderList','grammar.py',1643),
  ('orderList -> orderByElem','orderList',1,'p_orderList_1','grammar.py',1650),
  ('orderByElem -> columnName orderOpts orderNull','orderByElem',3,'p_orderByElem','grammar.py',1657),
  ('orderByElem -> INTEGER orderOpts orderNull','orderByElem',3,'p_orderByElem','grammar.py',1658),
  ('orderOpts -> R_ASC','orderOpts',1,'p_orderOpts','grammar.py',1665),
  ('orderOpts -> R_DESC','orderOpts',1,'p_orderOpts','grammar.py',1666),
  ('orderOpts -> <empty>','orderOpts',0,'p_orderOpts_n','grammar.py',1673),
  ('orderNull -> R_NULLS R_FIRST','orderNull',2,'p_orderNull','grammar.py',1679),
  ('orderNull -> R_NULLS R_LAST','orderNull',2,'p_orderNull','grammar.py',1680),
  ('orderNull -> <empty>','orderNull',0,'p_orderNull_n','grammar.py',1687),
  ('limitCl -> R_LIMIT INTEGER offsetLimit','limitCl',3,'p_limitCl','grammar.py',1693),
  ('limitCl -> R_LIMIT R_ALL offsetLimit','limitCl',3,'p_limitCl','grammar.py',1694),
  ('limitCl -> <empty>','limitCl',0,'p_limitCl_n','grammar.py',1701),
  ('offsetLimit -> R_OFFSET INTEGER','offsetLimit',2,'p_offsetLimit','grammar.py',1707),
  ('offsetLimit -> <empty>','offsetLimit',0,'p_offsetLimit_n','grammar.py',1713),
  ('insertStmt -> R_INSERT R_INTO ID paramsColumn R_VALUES S_PARIZQ paramsList S_PARDER','insertStmt',8,'p_insertStmt','grammar.py',1726),
  ('paramsColumn -> S_PARIZQ idList S_PARDER','paramsColumn',3,'p_paramsColumn','grammar.py',1734),
  ('paramsColumn -> <empty>','paramsColumn',0,'p_paramsColumn_none','grammar.py',1740),
  ('updateStmt -> R_UPDATE fromBody R_SET updateCols whereCl','updateStmt',5,'p_updateStmt','grammar.py',1754),
  ('updateCols -> updateCols S_COMA updateVals','updateCols',3,'p_updateCols_list','grammar.py',1763),
  ('updateCols -> updateVals','updateCols',1,'p_updateCols_u','grammar.py',1770),
  ('updateVals -> ID S_IGUAL updateExp','updateVals',3,'p_updateVals','grammar.py',1776),
  ('updateExp -> datatype','updateExp',1,'p_updateExp','grammar.py',1783),
  ('updateExp -> R_DEFAULT','updateExp',1,'p_updateExp','grammar.py',1784),
  ('deleteStmt -> R_DELETE fromCl whereCl','deleteStmt',3,'p_deleteStmt','grammar.py',1798),
  ('truncateStmt -> R_TRUNCATE tableOpt ID','truncateStmt',3,'p_truncateStmt','grammar.py',1804),
  ('tableOpt -> R_TABLE','tableOpt',1,'p_tableOpt','grammar.py',1810),
  ('tableOpt -> <empty>','tableOpt',0,'p_tableOpt','grammar.py',1811),
  ('showStmt -> R_SHOW R_DATABASES likeOpt','showStmt',3,'p_showStmt','grammar.py',1817),
  ('likeOpt -> R_LIKE STRING','likeOpt',2,'p_likeOpt','grammar.py',1823),
  ('likeOpt -> <empty>','likeOpt',0,'p_likeOpt','grammar.py',1824),
  ('useStmt -> R_USE ID','useStmt',2,'p_useStmt','grammar.py',1834),
]
